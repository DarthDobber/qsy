
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINleftMULDIVPOWrightUMINCOMMA DIV FLOAT IDENT INTEGER LBRACKET LPAREN MIN MUL NEWLINE PLUS POW RBRACKET RPARENprogram : program instruction\n                   | instructioninstruction : term argument_list\n                       | param_term argument_listinstruction : NEWLINEterm : IDENT\n                | INTEGER\n                | lookuplookup : IDENT LBRACKET INTEGER RBRACKETparam_term : IDENT LPAREN expression RPARENargument_list : termargument_list : term COMMA argument_listexpression : expression PLUS expression\n                      | expression MIN expression\n                      | expression DIV expression\n                      | expression POW expression\n                      | expression MUL expressionexpression : LPAREN expression RPARENexpression : INTEGERexpression : FLOATexpression : MIN expression %prec UMINexpression : IDENT'
    
_lr_action_items = {'NEWLINE':([0,1,2,5,7,8,9,10,11,12,13,24,33,],[5,5,-2,-5,-7,-8,-1,-11,-3,-6,-4,-12,-9,]),'IDENT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,18,20,24,26,27,28,29,30,31,33,],[6,6,-2,12,12,-5,-6,-7,-8,-1,-11,-3,-6,-4,17,12,17,17,-12,-10,17,17,17,17,17,-9,]),'INTEGER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,24,26,27,28,29,30,31,33,],[7,7,-2,7,7,-5,-6,-7,-8,-1,-11,-3,-6,-4,21,23,7,21,21,-12,-10,21,21,21,21,21,-9,]),'$end':([1,2,5,7,8,9,10,11,12,13,24,33,],[0,-2,-5,-7,-8,-1,-11,-3,-6,-4,-12,-9,]),'LPAREN':([6,14,18,20,27,28,29,30,31,],[14,18,18,18,18,18,18,18,18,]),'LBRACKET':([6,12,],[15,15,]),'COMMA':([7,8,10,12,33,],[-7,-8,16,-6,-9,]),'FLOAT':([14,18,20,27,28,29,30,31,],[22,22,22,22,22,22,22,22,]),'MIN':([14,17,18,19,20,21,22,25,27,28,29,30,31,32,34,35,36,37,38,39,],[20,-22,20,28,20,-19,-20,28,20,20,20,20,20,-21,-18,-13,-14,-15,-16,-17,]),'RPAREN':([17,19,21,22,25,32,34,35,36,37,38,39,],[-22,26,-19,-20,34,-21,-18,-13,-14,-15,-16,-17,]),'PLUS':([17,19,21,22,25,32,34,35,36,37,38,39,],[-22,27,-19,-20,27,-21,-18,-13,-14,-15,-16,-17,]),'DIV':([17,19,21,22,25,32,34,35,36,37,38,39,],[-22,29,-19,-20,29,-21,-18,29,29,-15,-16,-17,]),'POW':([17,19,21,22,25,32,34,35,36,37,38,39,],[-22,30,-19,-20,30,-21,-18,30,30,-15,-16,-17,]),'MUL':([17,19,21,22,25,32,34,35,36,37,38,39,],[-22,31,-19,-20,31,-21,-18,31,31,-15,-16,-17,]),'RBRACKET':([23,],[33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instruction':([0,1,],[2,9,]),'term':([0,1,3,4,16,],[3,3,10,10,10,]),'param_term':([0,1,],[4,4,]),'lookup':([0,1,3,4,16,],[8,8,8,8,8,]),'argument_list':([3,4,16,],[11,13,24,]),'expression':([14,18,20,27,28,29,30,31,],[19,25,32,35,36,37,38,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program instruction','program',2,'p_program','parser.py',24),
  ('program -> instruction','program',1,'p_program','parser.py',25),
  ('instruction -> term argument_list','instruction',2,'p_instruction','parser.py',38),
  ('instruction -> param_term argument_list','instruction',2,'p_instruction','parser.py',39),
  ('instruction -> NEWLINE','instruction',1,'p_instruction_newline','parser.py',43),
  ('term -> IDENT','term',1,'p_term','parser.py',47),
  ('term -> INTEGER','term',1,'p_term','parser.py',48),
  ('term -> lookup','term',1,'p_term','parser.py',49),
  ('lookup -> IDENT LBRACKET INTEGER RBRACKET','lookup',4,'p_lookup','parser.py',53),
  ('param_term -> IDENT LPAREN expression RPAREN','param_term',4,'p_param_term','parser.py',57),
  ('argument_list -> term','argument_list',1,'p_argument_list','parser.py',61),
  ('argument_list -> term COMMA argument_list','argument_list',3,'p_argument_list_args','parser.py',65),
  ('expression -> expression PLUS expression','expression',3,'p_expression_bin_op','parser.py',70),
  ('expression -> expression MIN expression','expression',3,'p_expression_bin_op','parser.py',71),
  ('expression -> expression DIV expression','expression',3,'p_expression_bin_op','parser.py',72),
  ('expression -> expression POW expression','expression',3,'p_expression_bin_op','parser.py',73),
  ('expression -> expression MUL expression','expression',3,'p_expression_bin_op','parser.py',74),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',90),
  ('expression -> INTEGER','expression',1,'p_expression_integer','parser.py',94),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',98),
  ('expression -> MIN expression','expression',2,'p_expression_unary_min','parser.py',102),
  ('expression -> IDENT','expression',1,'p_expression_ident','parser.py',106),
]
